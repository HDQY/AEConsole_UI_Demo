// source: AEConsoleBoard.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AEConsoleBoard.AccessType', null, global);
goog.exportSymbol('proto.AEConsoleBoard.BaseBoardType', null, global);
goog.exportSymbol('proto.AEConsoleBoard.BoardInfo', null, global);
goog.exportSymbol('proto.AEConsoleBoard.BoardType', null, global);
goog.exportSymbol('proto.AEConsoleBoard.BoardTypeInfo', null, global);
goog.exportSymbol('proto.AEConsoleBoard.ConfigStatus', null, global);
goog.exportSymbol('proto.AEConsoleBoard.CoreBoardType', null, global);
goog.exportSymbol('proto.AEConsoleBoard.FileReplyInfo', null, global);
goog.exportSymbol('proto.AEConsoleBoard.FileRequestInfo', null, global);
goog.exportSymbol('proto.AEConsoleBoard.FmcVoltageInfo', null, global);
goog.exportSymbol('proto.AEConsoleBoard.FpgaConfigInfo', null, global);
goog.exportSymbol('proto.AEConsoleBoard.FpgaConfigStatusInfo', null, global);
goog.exportSymbol('proto.AEConsoleBoard.OperationType', null, global);
goog.exportSymbol('proto.AEConsoleBoard.PllClockInfo', null, global);
goog.exportSymbol('proto.AEConsoleBoard.PllRunMode', null, global);
goog.exportSymbol('proto.AEConsoleBoard.PowerOnOff', null, global);
goog.exportSymbol('proto.AEConsoleBoard.PowerStatusInfo', null, global);
goog.exportSymbol('proto.AEConsoleBoard.RegAccessInfo', null, global);
goog.exportSymbol('proto.AEConsoleBoard.ResetInfo', null, global);
goog.exportSymbol('proto.AEConsoleBoard.ResultCode', null, global);
goog.exportSymbol('proto.AEConsoleBoard.ResultCodeInfo', null, global);
goog.exportSymbol('proto.AEConsoleBoard.RunningStatus', null, global);
goog.exportSymbol('proto.AEConsoleBoard.ServiceStatusInfo', null, global);
goog.exportSymbol('proto.AEConsoleBoard.SyncInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.ResultCodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleBoard.ResultCodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.ResultCodeInfo.displayName = 'proto.AEConsoleBoard.ResultCodeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.BoardInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleBoard.BoardInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.BoardInfo.displayName = 'proto.AEConsoleBoard.BoardInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.BoardTypeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleBoard.BoardTypeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.BoardTypeInfo.displayName = 'proto.AEConsoleBoard.BoardTypeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.FileRequestInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleBoard.FileRequestInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.FileRequestInfo.displayName = 'proto.AEConsoleBoard.FileRequestInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.FileReplyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleBoard.FileReplyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.FileReplyInfo.displayName = 'proto.AEConsoleBoard.FileReplyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.ServiceStatusInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleBoard.ServiceStatusInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.ServiceStatusInfo.displayName = 'proto.AEConsoleBoard.ServiceStatusInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.RegAccessInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleBoard.RegAccessInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.RegAccessInfo.displayName = 'proto.AEConsoleBoard.RegAccessInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.PowerStatusInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleBoard.PowerStatusInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.PowerStatusInfo.displayName = 'proto.AEConsoleBoard.PowerStatusInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.ResetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleBoard.ResetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.ResetInfo.displayName = 'proto.AEConsoleBoard.ResetInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.SyncInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleBoard.SyncInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.SyncInfo.displayName = 'proto.AEConsoleBoard.SyncInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.FmcVoltageInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleBoard.FmcVoltageInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.FmcVoltageInfo.displayName = 'proto.AEConsoleBoard.FmcVoltageInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.PllClockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AEConsoleBoard.PllClockInfo.repeatedFields_, null);
};
goog.inherits(proto.AEConsoleBoard.PllClockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.PllClockInfo.displayName = 'proto.AEConsoleBoard.PllClockInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.FpgaConfigInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleBoard.FpgaConfigInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.FpgaConfigInfo.displayName = 'proto.AEConsoleBoard.FpgaConfigInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleBoard.FpgaConfigStatusInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleBoard.FpgaConfigStatusInfo.displayName = 'proto.AEConsoleBoard.FpgaConfigStatusInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.ResultCodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.ResultCodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.ResultCodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.ResultCodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultcode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.ResultCodeInfo}
 */
proto.AEConsoleBoard.ResultCodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.ResultCodeInfo;
  return proto.AEConsoleBoard.ResultCodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.ResultCodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.ResultCodeInfo}
 */
proto.AEConsoleBoard.ResultCodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.ResultCodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.ResultCodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.ResultCodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.ResultCodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ResultCode ResultCode = 1;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleBoard.ResultCodeInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleBoard.ResultCodeInfo} returns this
 */
proto.AEConsoleBoard.ResultCodeInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.BoardInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.BoardInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.BoardInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.BoardInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    boardid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boarduuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ipaddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ipport: jspb.Message.getFieldWithDefault(msg, 4, 0),
    belongdeviceslotid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    baseboardtype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    coreboardtype: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.BoardInfo}
 */
proto.AEConsoleBoard.BoardInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.BoardInfo;
  return proto.AEConsoleBoard.BoardInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.BoardInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.BoardInfo}
 */
proto.AEConsoleBoard.BoardInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoarduuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpaddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIpport(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBelongdeviceslotid(value);
      break;
    case 6:
      var value = /** @type {!proto.AEConsoleBoard.BaseBoardType} */ (reader.readEnum());
      msg.setBaseboardtype(value);
      break;
    case 7:
      var value = /** @type {!proto.AEConsoleBoard.CoreBoardType} */ (reader.readEnum());
      msg.setCoreboardtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.BoardInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.BoardInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.BoardInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.BoardInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoardid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBoarduuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIpaddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIpport();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBelongdeviceslotid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBaseboardtype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getCoreboardtype();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional string BoardId = 1;
 * @return {string}
 */
proto.AEConsoleBoard.BoardInfo.prototype.getBoardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.BoardInfo} returns this
 */
proto.AEConsoleBoard.BoardInfo.prototype.setBoardid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BoardUUID = 2;
 * @return {string}
 */
proto.AEConsoleBoard.BoardInfo.prototype.getBoarduuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.BoardInfo} returns this
 */
proto.AEConsoleBoard.BoardInfo.prototype.setBoarduuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string IpAddress = 3;
 * @return {string}
 */
proto.AEConsoleBoard.BoardInfo.prototype.getIpaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.BoardInfo} returns this
 */
proto.AEConsoleBoard.BoardInfo.prototype.setIpaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 IpPort = 4;
 * @return {number}
 */
proto.AEConsoleBoard.BoardInfo.prototype.getIpport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.BoardInfo} returns this
 */
proto.AEConsoleBoard.BoardInfo.prototype.setIpport = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string BelongDeviceSlotId = 5;
 * @return {string}
 */
proto.AEConsoleBoard.BoardInfo.prototype.getBelongdeviceslotid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.BoardInfo} returns this
 */
proto.AEConsoleBoard.BoardInfo.prototype.setBelongdeviceslotid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional BaseBoardType BaseBoardType = 6;
 * @return {!proto.AEConsoleBoard.BaseBoardType}
 */
proto.AEConsoleBoard.BoardInfo.prototype.getBaseboardtype = function() {
  return /** @type {!proto.AEConsoleBoard.BaseBoardType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.AEConsoleBoard.BaseBoardType} value
 * @return {!proto.AEConsoleBoard.BoardInfo} returns this
 */
proto.AEConsoleBoard.BoardInfo.prototype.setBaseboardtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional CoreBoardType CoreBoardType = 7;
 * @return {!proto.AEConsoleBoard.CoreBoardType}
 */
proto.AEConsoleBoard.BoardInfo.prototype.getCoreboardtype = function() {
  return /** @type {!proto.AEConsoleBoard.CoreBoardType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.AEConsoleBoard.CoreBoardType} value
 * @return {!proto.AEConsoleBoard.BoardInfo} returns this
 */
proto.AEConsoleBoard.BoardInfo.prototype.setCoreboardtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.BoardTypeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.BoardTypeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.BoardTypeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.BoardTypeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    coreboardtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    baseboardtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resultcode: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.BoardTypeInfo}
 */
proto.AEConsoleBoard.BoardTypeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.BoardTypeInfo;
  return proto.AEConsoleBoard.BoardTypeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.BoardTypeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.BoardTypeInfo}
 */
proto.AEConsoleBoard.BoardTypeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.AEConsoleBoard.CoreBoardType} */ (reader.readEnum());
      msg.setCoreboardtype(value);
      break;
    case 2:
      var value = /** @type {!proto.AEConsoleBoard.BaseBoardType} */ (reader.readEnum());
      msg.setBaseboardtype(value);
      break;
    case 100:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.BoardTypeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.BoardTypeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.BoardTypeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.BoardTypeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoreboardtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBaseboardtype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * optional CoreBoardType CoreBoardType = 1;
 * @return {!proto.AEConsoleBoard.CoreBoardType}
 */
proto.AEConsoleBoard.BoardTypeInfo.prototype.getCoreboardtype = function() {
  return /** @type {!proto.AEConsoleBoard.CoreBoardType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.AEConsoleBoard.CoreBoardType} value
 * @return {!proto.AEConsoleBoard.BoardTypeInfo} returns this
 */
proto.AEConsoleBoard.BoardTypeInfo.prototype.setCoreboardtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional BaseBoardType BaseBoardType = 2;
 * @return {!proto.AEConsoleBoard.BaseBoardType}
 */
proto.AEConsoleBoard.BoardTypeInfo.prototype.getBaseboardtype = function() {
  return /** @type {!proto.AEConsoleBoard.BaseBoardType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.AEConsoleBoard.BaseBoardType} value
 * @return {!proto.AEConsoleBoard.BoardTypeInfo} returns this
 */
proto.AEConsoleBoard.BoardTypeInfo.prototype.setBaseboardtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ResultCode ResultCode = 100;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleBoard.BoardTypeInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleBoard.BoardTypeInfo} returns this
 */
proto.AEConsoleBoard.BoardTypeInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.FileRequestInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.FileRequestInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.FileRequestInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.FileRequestInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filesize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filecontents: msg.getFilecontents_asB64(),
    filenametosave: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.FileRequestInfo}
 */
proto.AEConsoleBoard.FileRequestInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.FileRequestInfo;
  return proto.AEConsoleBoard.FileRequestInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.FileRequestInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.FileRequestInfo}
 */
proto.AEConsoleBoard.FileRequestInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFilesize(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFilecontents(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilenametosave(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.FileRequestInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.FileRequestInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.FileRequestInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.FileRequestInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilesize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFilecontents_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getFilenametosave();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string FileName = 1;
 * @return {string}
 */
proto.AEConsoleBoard.FileRequestInfo.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.FileRequestInfo} returns this
 */
proto.AEConsoleBoard.FileRequestInfo.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 FileSize = 2;
 * @return {number}
 */
proto.AEConsoleBoard.FileRequestInfo.prototype.getFilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.FileRequestInfo} returns this
 */
proto.AEConsoleBoard.FileRequestInfo.prototype.setFilesize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes FileContents = 3;
 * @return {string}
 */
proto.AEConsoleBoard.FileRequestInfo.prototype.getFilecontents = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes FileContents = 3;
 * This is a type-conversion wrapper around `getFilecontents()`
 * @return {string}
 */
proto.AEConsoleBoard.FileRequestInfo.prototype.getFilecontents_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFilecontents()));
};


/**
 * optional bytes FileContents = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFilecontents()`
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.FileRequestInfo.prototype.getFilecontents_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFilecontents()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AEConsoleBoard.FileRequestInfo} returns this
 */
proto.AEConsoleBoard.FileRequestInfo.prototype.setFilecontents = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string FileNameToSave = 4;
 * @return {string}
 */
proto.AEConsoleBoard.FileRequestInfo.prototype.getFilenametosave = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.FileRequestInfo} returns this
 */
proto.AEConsoleBoard.FileRequestInfo.prototype.setFilenametosave = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.FileReplyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.FileReplyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.FileReplyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.FileReplyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultcode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.FileReplyInfo}
 */
proto.AEConsoleBoard.FileReplyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.FileReplyInfo;
  return proto.AEConsoleBoard.FileReplyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.FileReplyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.FileReplyInfo}
 */
proto.AEConsoleBoard.FileReplyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.FileReplyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.FileReplyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.FileReplyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.FileReplyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 ResultCode = 1;
 * @return {number}
 */
proto.AEConsoleBoard.FileReplyInfo.prototype.getResultcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.FileReplyInfo} returns this
 */
proto.AEConsoleBoard.FileReplyInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.ServiceStatusInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.ServiceStatusInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.ServiceStatusInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.ServiceStatusInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    runningstatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultcode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.ServiceStatusInfo}
 */
proto.AEConsoleBoard.ServiceStatusInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.ServiceStatusInfo;
  return proto.AEConsoleBoard.ServiceStatusInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.ServiceStatusInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.ServiceStatusInfo}
 */
proto.AEConsoleBoard.ServiceStatusInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.AEConsoleBoard.RunningStatus} */ (reader.readEnum());
      msg.setRunningstatus(value);
      break;
    case 2:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.ServiceStatusInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.ServiceStatusInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.ServiceStatusInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.ServiceStatusInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRunningstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional RunningStatus RunningStatus = 1;
 * @return {!proto.AEConsoleBoard.RunningStatus}
 */
proto.AEConsoleBoard.ServiceStatusInfo.prototype.getRunningstatus = function() {
  return /** @type {!proto.AEConsoleBoard.RunningStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.AEConsoleBoard.RunningStatus} value
 * @return {!proto.AEConsoleBoard.ServiceStatusInfo} returns this
 */
proto.AEConsoleBoard.ServiceStatusInfo.prototype.setRunningstatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ResultCode ResultCode = 2;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleBoard.ServiceStatusInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleBoard.ServiceStatusInfo} returns this
 */
proto.AEConsoleBoard.ServiceStatusInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.RegAccessInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.RegAccessInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.RegAccessInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boardid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fpgaid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    regaddr: jspb.Message.getFieldWithDefault(msg, 4, 0),
    regdata: jspb.Message.getFieldWithDefault(msg, 5, 0),
    accesstype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    resultcode: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.RegAccessInfo}
 */
proto.AEConsoleBoard.RegAccessInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.RegAccessInfo;
  return proto.AEConsoleBoard.RegAccessInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.RegAccessInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.RegAccessInfo}
 */
proto.AEConsoleBoard.RegAccessInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFpgaid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRegaddr(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRegdata(value);
      break;
    case 6:
      var value = /** @type {!proto.AEConsoleBoard.AccessType} */ (reader.readEnum());
      msg.setAccesstype(value);
      break;
    case 100:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.RegAccessInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.RegAccessInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.RegAccessInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBoardid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFpgaid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRegaddr();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getRegdata();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAccesstype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * optional string DeviceId = 1;
 * @return {string}
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.RegAccessInfo} returns this
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BoardId = 2;
 * @return {string}
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.getBoardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.RegAccessInfo} returns this
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.setBoardid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string FpgaId = 3;
 * @return {string}
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.getFpgaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.RegAccessInfo} returns this
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.setFpgaid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 RegAddr = 4;
 * @return {number}
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.getRegaddr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.RegAccessInfo} returns this
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.setRegaddr = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 RegData = 5;
 * @return {number}
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.getRegdata = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.RegAccessInfo} returns this
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.setRegdata = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional AccessType AccessType = 6;
 * @return {!proto.AEConsoleBoard.AccessType}
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.getAccesstype = function() {
  return /** @type {!proto.AEConsoleBoard.AccessType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.AEConsoleBoard.AccessType} value
 * @return {!proto.AEConsoleBoard.RegAccessInfo} returns this
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.setAccesstype = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional ResultCode ResultCode = 100;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleBoard.RegAccessInfo} returns this
 */
proto.AEConsoleBoard.RegAccessInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.PowerStatusInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.PowerStatusInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.PowerStatusInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.PowerStatusInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boardid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fpgaid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    poweronoff: jspb.Message.getFieldWithDefault(msg, 4, 0),
    resultcode: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.PowerStatusInfo}
 */
proto.AEConsoleBoard.PowerStatusInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.PowerStatusInfo;
  return proto.AEConsoleBoard.PowerStatusInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.PowerStatusInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.PowerStatusInfo}
 */
proto.AEConsoleBoard.PowerStatusInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFpgaid(value);
      break;
    case 4:
      var value = /** @type {!proto.AEConsoleBoard.PowerOnOff} */ (reader.readEnum());
      msg.setPoweronoff(value);
      break;
    case 100:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.PowerStatusInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.PowerStatusInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.PowerStatusInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.PowerStatusInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBoardid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFpgaid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPoweronoff();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * optional string DeviceId = 1;
 * @return {string}
 */
proto.AEConsoleBoard.PowerStatusInfo.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.PowerStatusInfo} returns this
 */
proto.AEConsoleBoard.PowerStatusInfo.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BoardId = 2;
 * @return {string}
 */
proto.AEConsoleBoard.PowerStatusInfo.prototype.getBoardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.PowerStatusInfo} returns this
 */
proto.AEConsoleBoard.PowerStatusInfo.prototype.setBoardid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string FpgaId = 3;
 * @return {string}
 */
proto.AEConsoleBoard.PowerStatusInfo.prototype.getFpgaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.PowerStatusInfo} returns this
 */
proto.AEConsoleBoard.PowerStatusInfo.prototype.setFpgaid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional PowerOnOff PowerOnOff = 4;
 * @return {!proto.AEConsoleBoard.PowerOnOff}
 */
proto.AEConsoleBoard.PowerStatusInfo.prototype.getPoweronoff = function() {
  return /** @type {!proto.AEConsoleBoard.PowerOnOff} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.AEConsoleBoard.PowerOnOff} value
 * @return {!proto.AEConsoleBoard.PowerStatusInfo} returns this
 */
proto.AEConsoleBoard.PowerStatusInfo.prototype.setPoweronoff = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional ResultCode ResultCode = 100;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleBoard.PowerStatusInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleBoard.PowerStatusInfo} returns this
 */
proto.AEConsoleBoard.PowerStatusInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.ResetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.ResetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.ResetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.ResetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boardid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fpgaid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    resetid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    resultcode: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.ResetInfo}
 */
proto.AEConsoleBoard.ResetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.ResetInfo;
  return proto.AEConsoleBoard.ResetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.ResetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.ResetInfo}
 */
proto.AEConsoleBoard.ResetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFpgaid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResetid(value);
      break;
    case 100:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.ResetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.ResetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.ResetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.ResetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBoardid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFpgaid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResetid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * optional string DeviceId = 1;
 * @return {string}
 */
proto.AEConsoleBoard.ResetInfo.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.ResetInfo} returns this
 */
proto.AEConsoleBoard.ResetInfo.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BoardId = 2;
 * @return {string}
 */
proto.AEConsoleBoard.ResetInfo.prototype.getBoardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.ResetInfo} returns this
 */
proto.AEConsoleBoard.ResetInfo.prototype.setBoardid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string FpgaId = 3;
 * @return {string}
 */
proto.AEConsoleBoard.ResetInfo.prototype.getFpgaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.ResetInfo} returns this
 */
proto.AEConsoleBoard.ResetInfo.prototype.setFpgaid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 ResetId = 4;
 * @return {number}
 */
proto.AEConsoleBoard.ResetInfo.prototype.getResetid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.ResetInfo} returns this
 */
proto.AEConsoleBoard.ResetInfo.prototype.setResetid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ResultCode ResultCode = 100;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleBoard.ResetInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleBoard.ResetInfo} returns this
 */
proto.AEConsoleBoard.ResetInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.SyncInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.SyncInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.SyncInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.SyncInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    operationtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    frequency: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    width: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pulsepattern: jspb.Message.getFieldWithDefault(msg, 4, 0),
    issavetosd: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    resultcode: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.SyncInfo}
 */
proto.AEConsoleBoard.SyncInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.SyncInfo;
  return proto.AEConsoleBoard.SyncInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.SyncInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.SyncInfo}
 */
proto.AEConsoleBoard.SyncInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOperationtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFrequency(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPulsepattern(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssavetosd(value);
      break;
    case 100:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.SyncInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.SyncInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.SyncInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.SyncInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperationtype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFrequency();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPulsepattern();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIssavetosd();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * optional int32 OperationType = 1;
 * @return {number}
 */
proto.AEConsoleBoard.SyncInfo.prototype.getOperationtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.SyncInfo} returns this
 */
proto.AEConsoleBoard.SyncInfo.prototype.setOperationtype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float Frequency = 2;
 * @return {number}
 */
proto.AEConsoleBoard.SyncInfo.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.SyncInfo} returns this
 */
proto.AEConsoleBoard.SyncInfo.prototype.setFrequency = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 Width = 3;
 * @return {number}
 */
proto.AEConsoleBoard.SyncInfo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.SyncInfo} returns this
 */
proto.AEConsoleBoard.SyncInfo.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 PulsePattern = 4;
 * @return {number}
 */
proto.AEConsoleBoard.SyncInfo.prototype.getPulsepattern = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.SyncInfo} returns this
 */
proto.AEConsoleBoard.SyncInfo.prototype.setPulsepattern = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool isSaveToSd = 5;
 * @return {boolean}
 */
proto.AEConsoleBoard.SyncInfo.prototype.getIssavetosd = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.AEConsoleBoard.SyncInfo} returns this
 */
proto.AEConsoleBoard.SyncInfo.prototype.setIssavetosd = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional ResultCode ResultCode = 100;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleBoard.SyncInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleBoard.SyncInfo} returns this
 */
proto.AEConsoleBoard.SyncInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.FmcVoltageInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.FmcVoltageInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.FmcVoltageInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boardid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fpgaid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fmcid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    voltagevalueindex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    iswritetoeeprom: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    resultcode: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.FmcVoltageInfo}
 */
proto.AEConsoleBoard.FmcVoltageInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.FmcVoltageInfo;
  return proto.AEConsoleBoard.FmcVoltageInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.FmcVoltageInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.FmcVoltageInfo}
 */
proto.AEConsoleBoard.FmcVoltageInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFpgaid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFmcid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVoltagevalueindex(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswritetoeeprom(value);
      break;
    case 100:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.FmcVoltageInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.FmcVoltageInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.FmcVoltageInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBoardid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFpgaid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFmcid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getVoltagevalueindex();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getIswritetoeeprom();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * optional string DeviceId = 1;
 * @return {string}
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.FmcVoltageInfo} returns this
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BoardId = 2;
 * @return {string}
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.getBoardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.FmcVoltageInfo} returns this
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.setBoardid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string FpgaId = 3;
 * @return {string}
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.getFpgaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.FmcVoltageInfo} returns this
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.setFpgaid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 FmcId = 4;
 * @return {number}
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.getFmcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.FmcVoltageInfo} returns this
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.setFmcid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 VoltageValueIndex = 5;
 * @return {number}
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.getVoltagevalueindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.FmcVoltageInfo} returns this
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.setVoltagevalueindex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool IsWriteToEeprom = 6;
 * @return {boolean}
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.getIswritetoeeprom = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.AEConsoleBoard.FmcVoltageInfo} returns this
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.setIswritetoeeprom = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional ResultCode ResultCode = 100;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleBoard.FmcVoltageInfo} returns this
 */
proto.AEConsoleBoard.FmcVoltageInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AEConsoleBoard.PllClockInfo.repeatedFields_ = [7,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.PllClockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.PllClockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.PllClockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boardid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fpgaid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pllid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pllrunmode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    inputfrequency: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    outputenablesList: (f = jspb.Message.getRepeatedBooleanField(msg, 7)) == null ? undefined : f,
    outputfrequencysList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 8)) == null ? undefined : f,
    regaddressesList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    regvaluesList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    configfilepath: jspb.Message.getFieldWithDefault(msg, 11, ""),
    issavetosdcard: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    resultcode: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.PllClockInfo}
 */
proto.AEConsoleBoard.PllClockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.PllClockInfo;
  return proto.AEConsoleBoard.PllClockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.PllClockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.PllClockInfo}
 */
proto.AEConsoleBoard.PllClockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFpgaid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPllid(value);
      break;
    case 5:
      var value = /** @type {!proto.AEConsoleBoard.PllRunMode} */ (reader.readEnum());
      msg.setPllrunmode(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInputfrequency(value);
      break;
    case 7:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOutputenables(values[i]);
      }
      break;
    case 8:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOutputfrequencys(values[i]);
      }
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRegaddresses(values[i]);
      }
      break;
    case 10:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRegvalues(values[i]);
      }
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigfilepath(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssavetosdcard(value);
      break;
    case 100:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.PllClockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.PllClockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.PllClockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBoardid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFpgaid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPllid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPllrunmode();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getInputfrequency();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getOutputenablesList();
  if (f.length > 0) {
    writer.writePackedBool(
      7,
      f
    );
  }
  f = message.getOutputfrequencysList();
  if (f.length > 0) {
    writer.writePackedFloat(
      8,
      f
    );
  }
  f = message.getRegaddressesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      9,
      f
    );
  }
  f = message.getRegvaluesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      10,
      f
    );
  }
  f = message.getConfigfilepath();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIssavetosdcard();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * optional string DeviceId = 1;
 * @return {string}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BoardId = 2;
 * @return {string}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.getBoardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.setBoardid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string FpgaId = 3;
 * @return {string}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.getFpgaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.setFpgaid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 PllId = 4;
 * @return {number}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.getPllid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.setPllid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional PllRunMode PllRunMode = 5;
 * @return {!proto.AEConsoleBoard.PllRunMode}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.getPllrunmode = function() {
  return /** @type {!proto.AEConsoleBoard.PllRunMode} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.AEConsoleBoard.PllRunMode} value
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.setPllrunmode = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional float InputFrequency = 6;
 * @return {number}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.getInputfrequency = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.setInputfrequency = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * repeated bool OutputEnables = 7;
 * @return {!Array<boolean>}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.getOutputenablesList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 7));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.setOutputenablesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.addOutputenables = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.clearOutputenablesList = function() {
  return this.setOutputenablesList([]);
};


/**
 * repeated float OutputFrequencys = 8;
 * @return {!Array<number>}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.getOutputfrequencysList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.setOutputfrequencysList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.addOutputfrequencys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.clearOutputfrequencysList = function() {
  return this.setOutputfrequencysList([]);
};


/**
 * repeated int32 RegAddresses = 9;
 * @return {!Array<number>}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.getRegaddressesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.setRegaddressesList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.addRegaddresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.clearRegaddressesList = function() {
  return this.setRegaddressesList([]);
};


/**
 * repeated int32 RegValues = 10;
 * @return {!Array<number>}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.getRegvaluesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.setRegvaluesList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.addRegvalues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.clearRegvaluesList = function() {
  return this.setRegvaluesList([]);
};


/**
 * optional string ConfigFilePath = 11;
 * @return {string}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.getConfigfilepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.setConfigfilepath = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool IsSavetoSdCard = 12;
 * @return {boolean}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.getIssavetosdcard = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.setIssavetosdcard = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional ResultCode ResultCode = 100;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleBoard.PllClockInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleBoard.PllClockInfo} returns this
 */
proto.AEConsoleBoard.PllClockInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.FpgaConfigInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.FpgaConfigInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.FpgaConfigInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boardid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fpgaid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    operationtype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    binfilepath: jspb.Message.getFieldWithDefault(msg, 5, ""),
    resultcode: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.FpgaConfigInfo}
 */
proto.AEConsoleBoard.FpgaConfigInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.FpgaConfigInfo;
  return proto.AEConsoleBoard.FpgaConfigInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.FpgaConfigInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.FpgaConfigInfo}
 */
proto.AEConsoleBoard.FpgaConfigInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFpgaid(value);
      break;
    case 4:
      var value = /** @type {!proto.AEConsoleBoard.OperationType} */ (reader.readEnum());
      msg.setOperationtype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBinfilepath(value);
      break;
    case 100:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.FpgaConfigInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.FpgaConfigInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.FpgaConfigInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBoardid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFpgaid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOperationtype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getBinfilepath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * optional string DeviceId = 1;
 * @return {string}
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.FpgaConfigInfo} returns this
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BoardId = 2;
 * @return {string}
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.getBoardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.FpgaConfigInfo} returns this
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.setBoardid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string FpgaId = 3;
 * @return {string}
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.getFpgaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.FpgaConfigInfo} returns this
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.setFpgaid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional OperationType OperationType = 4;
 * @return {!proto.AEConsoleBoard.OperationType}
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.getOperationtype = function() {
  return /** @type {!proto.AEConsoleBoard.OperationType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.AEConsoleBoard.OperationType} value
 * @return {!proto.AEConsoleBoard.FpgaConfigInfo} returns this
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.setOperationtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string BinFilePath = 5;
 * @return {string}
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.getBinfilepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.FpgaConfigInfo} returns this
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.setBinfilepath = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional ResultCode ResultCode = 100;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleBoard.FpgaConfigInfo} returns this
 */
proto.AEConsoleBoard.FpgaConfigInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleBoard.FpgaConfigStatusInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleBoard.FpgaConfigStatusInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boardid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fpgaid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    operationtype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    configstatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    progress: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    resultcode: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleBoard.FpgaConfigStatusInfo}
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleBoard.FpgaConfigStatusInfo;
  return proto.AEConsoleBoard.FpgaConfigStatusInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleBoard.FpgaConfigStatusInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleBoard.FpgaConfigStatusInfo}
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFpgaid(value);
      break;
    case 4:
      var value = /** @type {!proto.AEConsoleBoard.OperationType} */ (reader.readEnum());
      msg.setOperationtype(value);
      break;
    case 5:
      var value = /** @type {!proto.AEConsoleBoard.ConfigStatus} */ (reader.readEnum());
      msg.setConfigstatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProgress(value);
      break;
    case 100:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleBoard.FpgaConfigStatusInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleBoard.FpgaConfigStatusInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBoardid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFpgaid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOperationtype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getConfigstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getProgress();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * optional string DeviceId = 1;
 * @return {string}
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.FpgaConfigStatusInfo} returns this
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BoardId = 2;
 * @return {string}
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.getBoardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.FpgaConfigStatusInfo} returns this
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.setBoardid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string FpgaId = 3;
 * @return {string}
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.getFpgaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleBoard.FpgaConfigStatusInfo} returns this
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.setFpgaid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional OperationType OperationType = 4;
 * @return {!proto.AEConsoleBoard.OperationType}
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.getOperationtype = function() {
  return /** @type {!proto.AEConsoleBoard.OperationType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.AEConsoleBoard.OperationType} value
 * @return {!proto.AEConsoleBoard.FpgaConfigStatusInfo} returns this
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.setOperationtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional ConfigStatus ConfigStatus = 5;
 * @return {!proto.AEConsoleBoard.ConfigStatus}
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.getConfigstatus = function() {
  return /** @type {!proto.AEConsoleBoard.ConfigStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ConfigStatus} value
 * @return {!proto.AEConsoleBoard.FpgaConfigStatusInfo} returns this
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.setConfigstatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional double Progress = 6;
 * @return {number}
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.AEConsoleBoard.FpgaConfigStatusInfo} returns this
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.setProgress = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional ResultCode ResultCode = 100;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleBoard.FpgaConfigStatusInfo} returns this
 */
proto.AEConsoleBoard.FpgaConfigStatusInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};


/**
 * @enum {number}
 */
proto.AEConsoleBoard.ResultCode = {
  SUCCEED: 0,
  FAILED: 1,
  EXCEPTIONAL: 2,
  UNKNOWN: 100
};

/**
 * @enum {number}
 */
proto.AEConsoleBoard.CoreBoardType = {
  KU115: 0,
  VU440: 1,
  S10: 2,
  VU19P: 3
};

/**
 * @enum {number}
 */
proto.AEConsoleBoard.BaseBoardType = {
  SOLO: 0,
  DUAL: 1,
  QUAD: 2,
  CLK_440: 4,
  CLK_19P: 5
};

/**
 * @enum {number}
 */
proto.AEConsoleBoard.BoardType = {
  KU115_SOLO: 0,
  KU115_DUAL: 1,
  VU440_SOLO: 10,
  VU440_DUAL: 11,
  VU440_QUAD: 12,
  VU19P_SOLO: 20,
  VU19P_DUAL: 21,
  VU19P_QUAD: 22,
  CLOCK_GEN: 100
};

/**
 * @enum {number}
 */
proto.AEConsoleBoard.RunningStatus = {
  NORMAL: 0,
  ABNORMAL: 2
};

/**
 * @enum {number}
 */
proto.AEConsoleBoard.AccessType = {
  READ: 0,
  WRITE: 1
};

/**
 * @enum {number}
 */
proto.AEConsoleBoard.PowerOnOff = {
  POWEROFF: 0,
  POWERON: 1
};

/**
 * @enum {number}
 */
proto.AEConsoleBoard.PllRunMode = {
  FREERUN: 0,
  STANDARD: 1,
  ZERODELAY: 2
};

/**
 * @enum {number}
 */
proto.AEConsoleBoard.OperationType = {
  CONFIGFPGA: 0,
  SAVETOSDCARD: 1,
  CONFIGANDSAVE: 2
};

/**
 * @enum {number}
 */
proto.AEConsoleBoard.ConfigStatus = {
  STATUS_CONFIGING: 0,
  STATUS_SUCCEED: 1,
  STATUS_FAILED: 2
};

goog.object.extend(exports, proto.AEConsoleBoard);
