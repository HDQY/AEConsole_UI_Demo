// source: AEConsoleGateway.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var AEConsoleBoard_pb = require('./AEConsoleBoard_pb.js');
goog.object.extend(proto, AEConsoleBoard_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.AEConsoleGateway.BoardFpgaConfigInfo', null, global);
goog.exportSymbol('proto.AEConsoleGateway.ConnectionStatus', null, global);
goog.exportSymbol('proto.AEConsoleGateway.ConnectionStatusInfo', null, global);
goog.exportSymbol('proto.AEConsoleGateway.ConnectionStatusListInfo', null, global);
goog.exportSymbol('proto.AEConsoleGateway.DeviceIdInfo', null, global);
goog.exportSymbol('proto.AEConsoleGateway.DeviceInfo', null, global);
goog.exportSymbol('proto.AEConsoleGateway.DeviceType', null, global);
goog.exportSymbol('proto.AEConsoleGateway.DeviceTypeInfo', null, global);
goog.exportSymbol('proto.AEConsoleGateway.FmcVoltageInfoByFile', null, global);
goog.exportSymbol('proto.AEConsoleGateway.OnlineStatus', null, global);
goog.exportSymbol('proto.AEConsoleGateway.PllClockInfoByFile', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleGateway.ConnectionStatusInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleGateway.ConnectionStatusInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleGateway.ConnectionStatusInfo.displayName = 'proto.AEConsoleGateway.ConnectionStatusInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleGateway.ConnectionStatusListInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AEConsoleGateway.ConnectionStatusListInfo.repeatedFields_, null);
};
goog.inherits(proto.AEConsoleGateway.ConnectionStatusListInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleGateway.ConnectionStatusListInfo.displayName = 'proto.AEConsoleGateway.ConnectionStatusListInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleGateway.DeviceIdInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleGateway.DeviceIdInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleGateway.DeviceIdInfo.displayName = 'proto.AEConsoleGateway.DeviceIdInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleGateway.DeviceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AEConsoleGateway.DeviceInfo.repeatedFields_, null);
};
goog.inherits(proto.AEConsoleGateway.DeviceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleGateway.DeviceInfo.displayName = 'proto.AEConsoleGateway.DeviceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleGateway.DeviceTypeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleGateway.DeviceTypeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleGateway.DeviceTypeInfo.displayName = 'proto.AEConsoleGateway.DeviceTypeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleGateway.FmcVoltageInfoByFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleGateway.FmcVoltageInfoByFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleGateway.FmcVoltageInfoByFile.displayName = 'proto.AEConsoleGateway.FmcVoltageInfoByFile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleGateway.PllClockInfoByFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleGateway.PllClockInfoByFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleGateway.PllClockInfoByFile.displayName = 'proto.AEConsoleGateway.PllClockInfoByFile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AEConsoleGateway.BoardFpgaConfigInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AEConsoleGateway.BoardFpgaConfigInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AEConsoleGateway.BoardFpgaConfigInfo.displayName = 'proto.AEConsoleGateway.BoardFpgaConfigInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleGateway.ConnectionStatusInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleGateway.ConnectionStatusInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleGateway.ConnectionStatusInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.ConnectionStatusInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionstatus: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resultcode: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleGateway.ConnectionStatusInfo}
 */
proto.AEConsoleGateway.ConnectionStatusInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleGateway.ConnectionStatusInfo;
  return proto.AEConsoleGateway.ConnectionStatusInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleGateway.ConnectionStatusInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleGateway.ConnectionStatusInfo}
 */
proto.AEConsoleGateway.ConnectionStatusInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {!proto.AEConsoleGateway.ConnectionStatus} */ (reader.readEnum());
      msg.setConnectionstatus(value);
      break;
    case 100:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleGateway.ConnectionStatusInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleGateway.ConnectionStatusInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleGateway.ConnectionStatusInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.ConnectionStatusInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * optional string DeviceId = 1;
 * @return {string}
 */
proto.AEConsoleGateway.ConnectionStatusInfo.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleGateway.ConnectionStatusInfo} returns this
 */
proto.AEConsoleGateway.ConnectionStatusInfo.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ConnectionStatus ConnectionStatus = 2;
 * @return {!proto.AEConsoleGateway.ConnectionStatus}
 */
proto.AEConsoleGateway.ConnectionStatusInfo.prototype.getConnectionstatus = function() {
  return /** @type {!proto.AEConsoleGateway.ConnectionStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.AEConsoleGateway.ConnectionStatus} value
 * @return {!proto.AEConsoleGateway.ConnectionStatusInfo} returns this
 */
proto.AEConsoleGateway.ConnectionStatusInfo.prototype.setConnectionstatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional AEConsoleBoard.ResultCode ResultCode = 100;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleGateway.ConnectionStatusInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleGateway.ConnectionStatusInfo} returns this
 */
proto.AEConsoleGateway.ConnectionStatusInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AEConsoleGateway.ConnectionStatusListInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleGateway.ConnectionStatusListInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleGateway.ConnectionStatusListInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleGateway.ConnectionStatusListInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.ConnectionStatusListInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionstatusinfoList: jspb.Message.toObjectList(msg.getConnectionstatusinfoList(),
    proto.AEConsoleGateway.ConnectionStatusInfo.toObject, includeInstance),
    resultcode: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleGateway.ConnectionStatusListInfo}
 */
proto.AEConsoleGateway.ConnectionStatusListInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleGateway.ConnectionStatusListInfo;
  return proto.AEConsoleGateway.ConnectionStatusListInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleGateway.ConnectionStatusListInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleGateway.ConnectionStatusListInfo}
 */
proto.AEConsoleGateway.ConnectionStatusListInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AEConsoleGateway.ConnectionStatusInfo;
      reader.readMessage(value,proto.AEConsoleGateway.ConnectionStatusInfo.deserializeBinaryFromReader);
      msg.addConnectionstatusinfo(value);
      break;
    case 100:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleGateway.ConnectionStatusListInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleGateway.ConnectionStatusListInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleGateway.ConnectionStatusListInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.ConnectionStatusListInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionstatusinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.AEConsoleGateway.ConnectionStatusInfo.serializeBinaryToWriter
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * repeated ConnectionStatusInfo ConnectionStatusInfo = 1;
 * @return {!Array<!proto.AEConsoleGateway.ConnectionStatusInfo>}
 */
proto.AEConsoleGateway.ConnectionStatusListInfo.prototype.getConnectionstatusinfoList = function() {
  return /** @type{!Array<!proto.AEConsoleGateway.ConnectionStatusInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AEConsoleGateway.ConnectionStatusInfo, 1));
};


/**
 * @param {!Array<!proto.AEConsoleGateway.ConnectionStatusInfo>} value
 * @return {!proto.AEConsoleGateway.ConnectionStatusListInfo} returns this
*/
proto.AEConsoleGateway.ConnectionStatusListInfo.prototype.setConnectionstatusinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.AEConsoleGateway.ConnectionStatusInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AEConsoleGateway.ConnectionStatusInfo}
 */
proto.AEConsoleGateway.ConnectionStatusListInfo.prototype.addConnectionstatusinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.AEConsoleGateway.ConnectionStatusInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AEConsoleGateway.ConnectionStatusListInfo} returns this
 */
proto.AEConsoleGateway.ConnectionStatusListInfo.prototype.clearConnectionstatusinfoList = function() {
  return this.setConnectionstatusinfoList([]);
};


/**
 * optional AEConsoleBoard.ResultCode ResultCode = 100;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleGateway.ConnectionStatusListInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleGateway.ConnectionStatusListInfo} returns this
 */
proto.AEConsoleGateway.ConnectionStatusListInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleGateway.DeviceIdInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleGateway.DeviceIdInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleGateway.DeviceIdInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.DeviceIdInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleGateway.DeviceIdInfo}
 */
proto.AEConsoleGateway.DeviceIdInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleGateway.DeviceIdInfo;
  return proto.AEConsoleGateway.DeviceIdInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleGateway.DeviceIdInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleGateway.DeviceIdInfo}
 */
proto.AEConsoleGateway.DeviceIdInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleGateway.DeviceIdInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleGateway.DeviceIdInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleGateway.DeviceIdInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.DeviceIdInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string DeviceId = 1;
 * @return {string}
 */
proto.AEConsoleGateway.DeviceIdInfo.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleGateway.DeviceIdInfo} returns this
 */
proto.AEConsoleGateway.DeviceIdInfo.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AEConsoleGateway.DeviceInfo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleGateway.DeviceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleGateway.DeviceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleGateway.DeviceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.DeviceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceuuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devicetype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ownedboardidsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    onlinestatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    connectionstatus: jspb.Message.getFieldWithDefault(msg, 6, 0),
    runningstatus: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleGateway.DeviceInfo}
 */
proto.AEConsoleGateway.DeviceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleGateway.DeviceInfo;
  return proto.AEConsoleGateway.DeviceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleGateway.DeviceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleGateway.DeviceInfo}
 */
proto.AEConsoleGateway.DeviceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceuuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicetype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addOwnedboardids(value);
      break;
    case 5:
      var value = /** @type {!proto.AEConsoleGateway.OnlineStatus} */ (reader.readEnum());
      msg.setOnlinestatus(value);
      break;
    case 6:
      var value = /** @type {!proto.AEConsoleGateway.ConnectionStatus} */ (reader.readEnum());
      msg.setConnectionstatus(value);
      break;
    case 7:
      var value = /** @type {!proto.AEConsoleBoard.RunningStatus} */ (reader.readEnum());
      msg.setRunningstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleGateway.DeviceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleGateway.DeviceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleGateway.DeviceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.DeviceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceuuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevicetype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOwnedboardidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getOnlinestatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getConnectionstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getRunningstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional string DeviceId = 1;
 * @return {string}
 */
proto.AEConsoleGateway.DeviceInfo.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleGateway.DeviceInfo} returns this
 */
proto.AEConsoleGateway.DeviceInfo.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string DeviceUUID = 2;
 * @return {string}
 */
proto.AEConsoleGateway.DeviceInfo.prototype.getDeviceuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleGateway.DeviceInfo} returns this
 */
proto.AEConsoleGateway.DeviceInfo.prototype.setDeviceuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string DeviceType = 3;
 * @return {string}
 */
proto.AEConsoleGateway.DeviceInfo.prototype.getDevicetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleGateway.DeviceInfo} returns this
 */
proto.AEConsoleGateway.DeviceInfo.prototype.setDevicetype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string OwnedBoardIds = 4;
 * @return {!Array<string>}
 */
proto.AEConsoleGateway.DeviceInfo.prototype.getOwnedboardidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.AEConsoleGateway.DeviceInfo} returns this
 */
proto.AEConsoleGateway.DeviceInfo.prototype.setOwnedboardidsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.AEConsoleGateway.DeviceInfo} returns this
 */
proto.AEConsoleGateway.DeviceInfo.prototype.addOwnedboardids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AEConsoleGateway.DeviceInfo} returns this
 */
proto.AEConsoleGateway.DeviceInfo.prototype.clearOwnedboardidsList = function() {
  return this.setOwnedboardidsList([]);
};


/**
 * optional OnlineStatus OnlineStatus = 5;
 * @return {!proto.AEConsoleGateway.OnlineStatus}
 */
proto.AEConsoleGateway.DeviceInfo.prototype.getOnlinestatus = function() {
  return /** @type {!proto.AEConsoleGateway.OnlineStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.AEConsoleGateway.OnlineStatus} value
 * @return {!proto.AEConsoleGateway.DeviceInfo} returns this
 */
proto.AEConsoleGateway.DeviceInfo.prototype.setOnlinestatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional ConnectionStatus ConnectionStatus = 6;
 * @return {!proto.AEConsoleGateway.ConnectionStatus}
 */
proto.AEConsoleGateway.DeviceInfo.prototype.getConnectionstatus = function() {
  return /** @type {!proto.AEConsoleGateway.ConnectionStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.AEConsoleGateway.ConnectionStatus} value
 * @return {!proto.AEConsoleGateway.DeviceInfo} returns this
 */
proto.AEConsoleGateway.DeviceInfo.prototype.setConnectionstatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional AEConsoleBoard.RunningStatus RunningStatus = 7;
 * @return {!proto.AEConsoleBoard.RunningStatus}
 */
proto.AEConsoleGateway.DeviceInfo.prototype.getRunningstatus = function() {
  return /** @type {!proto.AEConsoleBoard.RunningStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.AEConsoleBoard.RunningStatus} value
 * @return {!proto.AEConsoleGateway.DeviceInfo} returns this
 */
proto.AEConsoleGateway.DeviceInfo.prototype.setRunningstatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleGateway.DeviceTypeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleGateway.DeviceTypeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleGateway.DeviceTypeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.DeviceTypeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resultcode: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleGateway.DeviceTypeInfo}
 */
proto.AEConsoleGateway.DeviceTypeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleGateway.DeviceTypeInfo;
  return proto.AEConsoleGateway.DeviceTypeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleGateway.DeviceTypeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleGateway.DeviceTypeInfo}
 */
proto.AEConsoleGateway.DeviceTypeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.AEConsoleGateway.DeviceType} */ (reader.readEnum());
      msg.setDevicetype(value);
      break;
    case 100:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleGateway.DeviceTypeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleGateway.DeviceTypeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleGateway.DeviceTypeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.DeviceTypeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * optional DeviceType DeviceType = 1;
 * @return {!proto.AEConsoleGateway.DeviceType}
 */
proto.AEConsoleGateway.DeviceTypeInfo.prototype.getDevicetype = function() {
  return /** @type {!proto.AEConsoleGateway.DeviceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.AEConsoleGateway.DeviceType} value
 * @return {!proto.AEConsoleGateway.DeviceTypeInfo} returns this
 */
proto.AEConsoleGateway.DeviceTypeInfo.prototype.setDevicetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional AEConsoleBoard.ResultCode ResultCode = 100;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleGateway.DeviceTypeInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleGateway.DeviceTypeInfo} returns this
 */
proto.AEConsoleGateway.DeviceTypeInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleGateway.FmcVoltageInfoByFile.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleGateway.FmcVoltageInfoByFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleGateway.FmcVoltageInfoByFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.FmcVoltageInfoByFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boardid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    configfilepath: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleGateway.FmcVoltageInfoByFile}
 */
proto.AEConsoleGateway.FmcVoltageInfoByFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleGateway.FmcVoltageInfoByFile;
  return proto.AEConsoleGateway.FmcVoltageInfoByFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleGateway.FmcVoltageInfoByFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleGateway.FmcVoltageInfoByFile}
 */
proto.AEConsoleGateway.FmcVoltageInfoByFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigfilepath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleGateway.FmcVoltageInfoByFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleGateway.FmcVoltageInfoByFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleGateway.FmcVoltageInfoByFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.FmcVoltageInfoByFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBoardid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfigfilepath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string DeviceId = 1;
 * @return {string}
 */
proto.AEConsoleGateway.FmcVoltageInfoByFile.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleGateway.FmcVoltageInfoByFile} returns this
 */
proto.AEConsoleGateway.FmcVoltageInfoByFile.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BoardId = 2;
 * @return {string}
 */
proto.AEConsoleGateway.FmcVoltageInfoByFile.prototype.getBoardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleGateway.FmcVoltageInfoByFile} returns this
 */
proto.AEConsoleGateway.FmcVoltageInfoByFile.prototype.setBoardid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ConfigFilePath = 3;
 * @return {string}
 */
proto.AEConsoleGateway.FmcVoltageInfoByFile.prototype.getConfigfilepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleGateway.FmcVoltageInfoByFile} returns this
 */
proto.AEConsoleGateway.FmcVoltageInfoByFile.prototype.setConfigfilepath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleGateway.PllClockInfoByFile.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleGateway.PllClockInfoByFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleGateway.PllClockInfoByFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.PllClockInfoByFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boardid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    configfilepath: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleGateway.PllClockInfoByFile}
 */
proto.AEConsoleGateway.PllClockInfoByFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleGateway.PllClockInfoByFile;
  return proto.AEConsoleGateway.PllClockInfoByFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleGateway.PllClockInfoByFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleGateway.PllClockInfoByFile}
 */
proto.AEConsoleGateway.PllClockInfoByFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigfilepath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleGateway.PllClockInfoByFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleGateway.PllClockInfoByFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleGateway.PllClockInfoByFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.PllClockInfoByFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBoardid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfigfilepath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string DeviceId = 1;
 * @return {string}
 */
proto.AEConsoleGateway.PllClockInfoByFile.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleGateway.PllClockInfoByFile} returns this
 */
proto.AEConsoleGateway.PllClockInfoByFile.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BoardId = 2;
 * @return {string}
 */
proto.AEConsoleGateway.PllClockInfoByFile.prototype.getBoardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleGateway.PllClockInfoByFile} returns this
 */
proto.AEConsoleGateway.PllClockInfoByFile.prototype.setBoardid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ConfigFilePath = 3;
 * @return {string}
 */
proto.AEConsoleGateway.PllClockInfoByFile.prototype.getConfigfilepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleGateway.PllClockInfoByFile} returns this
 */
proto.AEConsoleGateway.PllClockInfoByFile.prototype.setConfigfilepath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AEConsoleGateway.BoardFpgaConfigInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AEConsoleGateway.BoardFpgaConfigInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AEConsoleGateway.BoardFpgaConfigInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.BoardFpgaConfigInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    boardserviceurl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boardfpgaid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    resultcode: jspb.Message.getFieldWithDefault(msg, 100, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AEConsoleGateway.BoardFpgaConfigInfo}
 */
proto.AEConsoleGateway.BoardFpgaConfigInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AEConsoleGateway.BoardFpgaConfigInfo;
  return proto.AEConsoleGateway.BoardFpgaConfigInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AEConsoleGateway.BoardFpgaConfigInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AEConsoleGateway.BoardFpgaConfigInfo}
 */
proto.AEConsoleGateway.BoardFpgaConfigInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardserviceurl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardfpgaid(value);
      break;
    case 100:
      var value = /** @type {!proto.AEConsoleBoard.ResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AEConsoleGateway.BoardFpgaConfigInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AEConsoleGateway.BoardFpgaConfigInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AEConsoleGateway.BoardFpgaConfigInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AEConsoleGateway.BoardFpgaConfigInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoardserviceurl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBoardfpgaid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      100,
      f
    );
  }
};


/**
 * optional string BoardServiceUrl = 1;
 * @return {string}
 */
proto.AEConsoleGateway.BoardFpgaConfigInfo.prototype.getBoardserviceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleGateway.BoardFpgaConfigInfo} returns this
 */
proto.AEConsoleGateway.BoardFpgaConfigInfo.prototype.setBoardserviceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string BoardFpgaId = 2;
 * @return {string}
 */
proto.AEConsoleGateway.BoardFpgaConfigInfo.prototype.getBoardfpgaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AEConsoleGateway.BoardFpgaConfigInfo} returns this
 */
proto.AEConsoleGateway.BoardFpgaConfigInfo.prototype.setBoardfpgaid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional AEConsoleBoard.ResultCode ResultCode = 100;
 * @return {!proto.AEConsoleBoard.ResultCode}
 */
proto.AEConsoleGateway.BoardFpgaConfigInfo.prototype.getResultcode = function() {
  return /** @type {!proto.AEConsoleBoard.ResultCode} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {!proto.AEConsoleBoard.ResultCode} value
 * @return {!proto.AEConsoleGateway.BoardFpgaConfigInfo} returns this
 */
proto.AEConsoleGateway.BoardFpgaConfigInfo.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 100, value);
};


/**
 * @enum {number}
 */
proto.AEConsoleGateway.DeviceType = {
  KU115_SOLO: 0,
  KU115_DUAL: 1,
  KU115_QUAD: 2,
  VU440_SOLO: 10,
  VU440_DUAL: 11,
  VU440_QUAD: 12,
  VU440_HEXA: 13,
  VU19P_SOLO: 20,
  VU19P_DUAL: 21,
  VU19P_QUAD: 22
};

/**
 * @enum {number}
 */
proto.AEConsoleGateway.OnlineStatus = {
  UNKNOWN_ONLINESTATUS: 0,
  ONLINE: 1,
  OFFLINE: 2
};

/**
 * @enum {number}
 */
proto.AEConsoleGateway.ConnectionStatus = {
  UNKNOWN_CONNECTIONSTATUS: 0,
  CONNECTED: 1,
  DISCONNECTED: 2
};

goog.object.extend(exports, proto.AEConsoleGateway);
